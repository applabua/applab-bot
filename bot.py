import logging
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ChatMemberHandler,
    filters,
    ContextTypes
)

# ---------------------------------------
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ---------------------------------------
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û—Ç–∫–ª—é—á–∞–µ–º (–ø–æ–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å) –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è–ª–∏ –∫–æ–Ω—Å–æ–ª—å
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.bot").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
logging.getLogger("apscheduler").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# ---------------------------------------
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –°–û–°–¢–û–Ø–ù–ò–Ø
# ---------------------------------------
# –î–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏ (–¥–≤–∞ —à–∞–≥–∞):
ORDER_PROJECT, ORDER_NAME_PHONE = range(2)

# –î–ª—è /newpost (—á–µ—Ç—ã—Ä–µ —à–∞–≥–∞):
NP_TEXT, NP_NEED_BUTTON, NP_BUTTON_URL, NP_BUTTON_TEXT = range(4)

# IDs –∏ —Ç–æ–∫–µ–Ω
ADMIN_ID = 2045410830
GROUP_CHAT_ID = "@applab_ua"
TOKEN = "7548740282:AAGjI2kJsiVC8C1dJWHU9EXDHdEF2BVJgkM"

# ---------------------------------------
# –û–ë–†–ê–ë–û–¢–ß–ò–ö /start
# ---------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º, —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥ –∏ 2 –∫–Ω–æ–ø–∫–∞–º–∏:
    - ¬´–ó–∞–º–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ üì±¬ª
    - ¬´AppLab ü§ñ¬ª
    –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã /start (–∫—Ç–æ –Ω–∞–∂–∞–ª –∏ –∫–æ–≥–¥–∞).
    """
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"[{now}] {user.full_name} (ID: {user.id}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")

    # –¢–µ–∫—Å—Ç —É—Å–ª—É–≥
    services_text = (
        "1. üéÆ –î–æ–¥–∞—Ç–∫–∏ –¥–ª—è Telegram (–∫–ª—ñ–∫–µ—Ä–∏, P2E, –º—ñ–Ω—ñ-—ñ–≥—Ä–∏)\n"
        "2. ü§ñ –†–æ–∑—É–º–Ω—ñ Telegram-–±–æ—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂—ñ–≤\n"
        "3. üß†ü§ñ –î–æ–¥–∞—Ç–∫–∏ —Ç–∞ –±–æ—Ç–∏ –∑ —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º\n"
        "4. üì± –ú–æ–±—ñ–ª—å–Ω—ñ –¥–æ–¥–∞—Ç–∫–∏ –¥–ª—è App Store —Ç–∞ Google Play\n"
        "5. üí≥ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∏ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –æ–ø–ª–∞—Ç\n"
        "6. üìà –¢–æ—Ä–≥–æ–≤—ñ –±–æ—Ç–∏ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É\n"
        "7. ‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –±—ñ–∑–Ω–µ—Å—É\n"
        "8. üîÆ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É\n"
        "9. üåêüîó –°–∞–π—Ç–∏ —Ç–∞ –±–ª–æ–∫—á–µ–π–Ω-–¥–æ–¥–∞—Ç–∫–∏\n"
    )
    caption_text = (
        "üöÄ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ AppLab! üöÄ\n\n"
        "–ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω—ñ –¥–æ–¥–∞—Ç–∫–∏, –±–æ—Ç–∏ —Ç–∞ –≤–µ–±-—Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –≤–∞—à–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É.\n\n"
        f"{services_text}\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ."
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = [
        [InlineKeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ üì±", callback_data="order_app")],
        [InlineKeyboardButton("AppLab ü§ñ", web_app=WebAppInfo(url="https://applabua.github.io/AppLab/"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_photo(
        photo="https://i.ibb.co/MyKXZPRf/photo-2025-03-04-09-29-07.jpg",
        caption=caption_text,
        reply_markup=reply_markup
    )

# ---------------------------------------
# CALLBACK: "–ó–∞–º–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ üì±"
# ---------------------------------------
async def order_app_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–ó–∞–º–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ üì±¬ª.
    –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —É—Å–ª—É–≥.
    """
    query = update.callback_query
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"[{now}] {user.full_name} (ID: {user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ó–∞–º–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫'")

    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üéÆ –î–æ–¥–∞—Ç–∫–∏ –¥–ª—è Telegram (–∫–ª—ñ–∫–µ—Ä–∏, P2E, –º—ñ–Ω—ñ-—ñ–≥—Ä–∏)", callback_data="select_service_1")],
        [InlineKeyboardButton("ü§ñ –†–æ–∑—É–º–Ω—ñ Telegram-–±–æ—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂—ñ–≤", callback_data="select_service_2")],
        [InlineKeyboardButton("üß†ü§ñ –î–æ–¥–∞—Ç–∫–∏ —Ç–∞ –±–æ—Ç–∏ –∑ —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º", callback_data="select_service_3")],
        [InlineKeyboardButton("üì± –ú–æ–±—ñ–ª—å–Ω—ñ –¥–æ–¥–∞—Ç–∫–∏ –¥–ª—è App Store —Ç–∞ Google Play", callback_data="select_service_4")],
        [InlineKeyboardButton("üí≥ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∏ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –æ–ø–ª–∞—Ç", callback_data="select_service_5")],
        [InlineKeyboardButton("üìà –¢–æ—Ä–≥–æ–≤—ñ –±–æ—Ç–∏ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É", callback_data="select_service_6")],
        [InlineKeyboardButton("‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –±—ñ–∑–Ω–µ—Å—É", callback_data="select_service_7")],
        [InlineKeyboardButton("üîÆ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É", callback_data="select_service_8")],
        [InlineKeyboardButton("üåêüîó –°–∞–π—Ç–∏ —Ç–∞ –±–ª–æ–∫—á–µ–π–Ω-–¥–æ–¥–∞—Ç–∫–∏", callback_data="select_service_9")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", reply_markup=reply_markup)

# ---------------------------------------
# CALLBACK: –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
# ---------------------------------------
async def select_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –æ–¥–Ω—É –∏–∑ —É—Å–ª—É–≥ (select_service_1 –∏ —Ç.–¥.).
    –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    –ó–∞—Ç–µ–º —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    query = update.callback_query
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    await query.answer()
    service_number = query.data.split("_")[-1]
    services = {
        "1": "–î–æ–¥–∞—Ç–∫–∏ –¥–ª—è Telegram (–∫–ª—ñ–∫–µ—Ä–∏, P2E, –º—ñ–Ω—ñ-—ñ–≥—Ä–∏)",
        "2": "–†–æ–∑—É–º–Ω—ñ Telegram-–±–æ—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂—ñ–≤",
        "3": "–î–æ–¥–∞—Ç–∫–∏ —Ç–∞ –±–æ—Ç–∏ –∑ —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º",
        "4": "–ú–æ–±—ñ–ª—å–Ω—ñ –¥–æ–¥–∞—Ç–∫–∏ –¥–ª—è App Store —Ç–∞ Google Play",
        "5": "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∏ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –æ–ø–ª–∞—Ç",
        "6": "–¢–æ—Ä–≥–æ–≤—ñ –±–æ—Ç–∏ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É",
        "7": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –±—ñ–∑–Ω–µ—Å—É",
        "8": "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É",
        "9": "–°–∞–π—Ç–∏ —Ç–∞ –±–ª–æ–∫—á–µ–π–Ω-–¥–æ–¥–∞—Ç–∫–∏"
    }
    service_title = services.get(service_number, "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ—Å–ª—É–≥–∞")

    logger.info(f"[{now}] {user.full_name} (ID: {user.id}) –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É: {service_title}")

    context.user_data["selected_service"] = service_title
    text = (
        f"–í–∏ –æ–±—Ä–∞–ª–∏: {service_title}\n\n"
        "–û–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –≤–∞—à –ø—Ä–æ—î–∫—Ç:"
    )
    await query.message.reply_text(text)
    return ORDER_PROJECT

# ---------------------------------------
# –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
# ---------------------------------------
async def order_project(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∏–º–µ–Ω–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    context.user_data["project_description"] = update.message.text
    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
    )
    return ORDER_NAME_PHONE

# ---------------------------------------
# –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
# ---------------------------------------
async def order_name_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.
    –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É.
    """
    context.user_data["name_phone"] = update.message.text

    service = context.user_data.get("selected_service", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ—Å–ª—É–≥–∞")
    project = context.user_data.get("project_description", "")
    name_phone = context.user_data.get("name_phone", "")

    message_to_admin = (
        f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
        f"–ü–æ—Å–ª—É–≥–∞: {service}\n"
        f"–ü—Ä–æ—î–∫—Ç: {project}\n"
        f"–Ü–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: {name_phone}"
    )

    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=message_to_admin)
        await update.message.reply_text(
            "–î—è–∫—É—î–º–æ, –º–∏ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –ø—Ä–æ—Ç—è–≥–æ–º –≥–æ–¥–∏–Ω–∏.\n"
            "–Ø–∫—â–æ —É –≤–∞—Å —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @applab_manager."
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

    return ConversationHandler.END

# ---------------------------------------
# /newpost –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
# ---------------------------------------
async def start_newpost(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"[{now}] {user.full_name} (ID: {user.id}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /newpost")

    if user.id != ADMIN_ID:
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Ü—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:")
    return NP_TEXT

async def receive_newpost_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["newpost_text"] = update.message.text
    await update.message.reply_text("–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–Ω–æ–ø–∫–∞? –ù–∞–ø–∏—à—ñ—Ç—å '—Ç–∞–∫' –∞–±–æ '–Ω—ñ'.")
    return NP_NEED_BUTTON

async def newpost_need_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text.strip().lower()
    if answer == "—Ç–∞–∫":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        return NP_BUTTON_URL
    else:
        post_text = context.user_data.get("newpost_text", "")
        try:
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=post_text)
            await update.message.reply_text("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
            await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
        return ConversationHandler.END

async def newpost_button_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["button_url"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    return NP_BUTTON_TEXT

async def newpost_button_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    button_text = update.message.text.strip()
    post_text = context.user_data.get("newpost_text", "")
    button_url = context.user_data.get("button_url", "")
    keyboard = [
        [InlineKeyboardButton(button_text, url=button_url)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=post_text, reply_markup=reply_markup)
        await update.message.reply_text("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
    return ConversationHandler.END

# ---------------------------------------
# /cancel (–æ—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ ConversationHandler)
# ---------------------------------------
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"[{now}] {user.full_name} (ID: {user.id}) –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é /cancel")

    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# ---------------------------------------
# –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í –í –ì–†–£–ü–ü–ï/–°–£–ü–ï–†–ì–†–£–ü–ü–ï
# ---------------------------------------
async def track_chat_members(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞ (–≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã) –º–µ–Ω—è–µ—Ç—Å—è.
    –ú—ã –±—É–¥–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö, –∫—Ç–æ "–∑–∞—à—ë–ª" (new_status = 'member' –∏–ª–∏ 'administrator' –∏ —Ç.–¥.).
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ set() bot_data["channel_visitors"].
    """
    chat_id = update.chat_member.chat.id
    # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
    # if chat_id != -1001234567890: return

    old_status = update.chat_member.old_chat_member.status
    new_status = update.chat_member.new_chat_member.status
    user = update.chat_member.new_chat_member.user

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
    if "channel_visitors" not in context.bot_data:
        context.bot_data["channel_visitors"] = set()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º (member/administrator/creator), –ª–æ–≥–∏—Ä—É–µ–º
    if new_status in ("member", "administrator", "creator") and old_status not in ("member", "administrator", "creator"):
        context.bot_data["channel_visitors"].add((user.id, user.full_name))
        logger.info(f"User {user.full_name} (ID: {user.id}) joined chat {chat_id}")

# ---------------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /channel_visitors ‚Äì –∫—Ç–æ –∑–∞—Ö–æ–¥–∏–ª
# ---------------------------------------
async def show_channel_visitors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ bot_data["channel_visitors"].
    """
    if "channel_visitors" not in context.bot_data or not context.bot_data["channel_visitors"]:
        await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–≤.")
        return

    visitors_list = list(context.bot_data["channel_visitors"])
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç-—Å–ø–∏—Å–æ–∫
    text_lines = []
    for user_id, full_name in visitors_list:
        text_lines.append(f"- {full_name} (ID: {user_id})")

    text_result = "–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –∑–∞—Ö–æ–¥–∏–ª–∏ –≤ –≥—Ä—É–ø—É:\n" + "\n".join(text_lines)
    await update.message.reply_text(text_result)

# ---------------------------------------
# MAIN
# ---------------------------------------
def main() -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞.
    """
    application = ApplicationBuilder().token(TOKEN).build()

    # -----------------------------------
    # 1) Conversation –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏
    # -----------------------------------
    order_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(select_service, pattern="^select_service_")],
        states={
            ORDER_PROJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_project)],
            ORDER_NAME_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_name_phone)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    application.add_handler(order_conv_handler)

    # -----------------------------------
    # 2) Conversation –¥–ª—è /newpost
    # -----------------------------------
    newpost_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("newpost", start_newpost)],
        states={
            NP_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_newpost_text)],
            NP_NEED_BUTTON: [MessageHandler(filters.TEXT & ~filters.COMMAND, newpost_need_button)],
            NP_BUTTON_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, newpost_button_url)],
            NP_BUTTON_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, newpost_button_text)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(newpost_conv_handler)

    # -----------------------------------
    # /start
    # -----------------------------------
    application.add_handler(CommandHandler("start", start))

    # -----------------------------------
    # Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ó–∞–º–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ üì±¬ª
    # -----------------------------------
    application.add_handler(CallbackQueryHandler(order_app_callback, pattern="^order_app$"))

    # -----------------------------------
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (ChatMemberHandler)
    # -----------------------------------
    application.add_handler(ChatMemberHandler(track_chat_members, ChatMemberHandler.CHAT_MEMBER))

    # -----------------------------------
    # –ö–æ–º–∞–Ω–¥–∞ /channel_visitors
    # -----------------------------------
    application.add_handler(CommandHandler("channel_visitors", show_channel_visitors))

    # -----------------------------------
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    # -----------------------------------
    application.run_polling()

if __name__ == "__main__":
    main()
